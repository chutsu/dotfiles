set nocompatible              " Be iMproved, required

function! Vundle()
    set nocompatible              " Be iMproved, required
    filetype off                  " Required

    " Set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " Alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " Let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'

    " The following are vim packages
    Plugin 'tpope/vim-fugitive'
    Plugin 'tpope/vim-surround'
    Plugin 'vim-syntastic/syntastic'
    Plugin 'scrooloose/nerdtree'
    Plugin 'junegunn/fzf'
    Plugin 'bling/vim-airline'
    Plugin 'bronson/vim-trailing-whitespace'
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'osyo-manga/vim-over'
    Plugin 'kris89/vim-multiple-cursors'
    Plugin 'vim-scripts/camelcasemotion'
    Plugin 'vim-scripts/EasyGrep'
    Plugin 'klen/python-mode'
    Plugin 'vim-scripts/AnsiEsc.vim'
    Plugin 'reedes/vim-pencil'
    Plugin 'inside/vim-search-pulse'
    Plugin 'tomtom/tcomment_vim'
    Plugin 'jvirtanen/vim-octave'
    Plugin 'plasticboy/vim-markdown'
    Plugin 'sirtaj/vim-openscad'
    Plugin 'SirVer/ultisnips'


    " All of your Plugins must be added before the following line'
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    " filetype plugin on

    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to
    " auto-approve removal

    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line
endfunction

function! StartUp()
    autocmd VimEnter * NERDTree | wincmd p
endfunction

function! EditorAppearance()
    syntax on
    set number
    set laststatus=2
    set showtabline=2
    set t_Co=256
    colorscheme eyecandy
    set cursorline
    " set fillchars=" split char
    set encoding=utf-8

    " Let terminal resize scale the internal windows
    autocmd VimResized * :wincmd =

    " Set syntax highlighting for tex files
    autocmd FileType tex set syntax=plaintex

    " Highlight when code is over 81 columns
    " augroup vimrc_autocmds
    "     autocmd BufEnter * highlight OverLength ctermbg=darkgrey
    "     autocmd BufEnter * match OverLength /\%81v.*/
    " augroup END
endfunction

function! EditorBehaviour()
    filetype plugin indent on
    set autoread
    set backupdir=/tmp
    set directory=/tmp
    set title
    set visualbell
    set noerrorbells
    set history=1000
    set undolevels=1000
    set showmatch
    set ignorecase
    set autoindent
    set copyindent
    set shiftround
    set backspace=indent,eol,start
    set smartcase
    set expandtab
    set smarttab
    set hlsearch
    set incsearch
    set mouse=a  " enable mouse
    set scrolloff=10  " top/bottom padding when scrolling

    " Load git repo specific vim settings if any
    let git_settings = system("git config --get vim.settings")
    if strlen(git_settings)
        filetype plugin off
        exe "set" git_settings
    endif

    " Remove trailing whitespace automatically when saving
    autocmd FileType c,cpp,java,php,python,javascript,markdown
            \ autocmd BufWritePre <buffer> :%s/\s\+$//e

    " " Retab file when saving
    " autocmd FileType c,cpp,java,php,python,javascript,markdown
    "         \ autocmd BufWritePre <buffer> :retab

    " " Expandtab when saving
    " autocmd FileType c,cpp,java,php,python,javascript,markdown
    "         \ autocmd BufWritePre <buffer> :set expandtab

    " " Replace tabs in file when saving
    " autocmd FileType python
    "         \ autocmd BufWritePre <buffer> :%s/\t/\ \ \ \ /g

    " Reload vimrc after update
    " autocmd BufWritePost .vimrc so ~/.vimrc

    " Generate ctags
    autocmd BufWritePost *
      \ call system('ctags -R --exclude=dep --exclude=build --exclude=docs --exclude=octave .')

    " Correct filetype recognition
    autocmd FileType java call JavaMode()
    autocmd BufRead /tmp/mutt-* call Mutt()
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd BufNewFile,BufReadPost *.launch set filetype=xml
    autocmd BufNewFile,BufReadPost *.h set filetype=c
    autocmd BufNewFile,BufReadPost *.c set filetype=c

    " " Plain text mode
    " autocmd FileType markdown,mkd
    "     \ call pencil#init({"wrap": "hard"})

    " Reselect block after indentation
    vnoremap < <gv
    vnoremap > >gv

    " Fix stupid typos
    map w ,w
    map b ,b

    " Restore cursor's last position in file
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

    " Highlight non-ascii characters
    set listchars=nbsp:¬,eol:¶,tab:>-,extends:»,precedes:«,trail:•

    " Softwrap lines
    command! -range=% SoftWrap
        \ <line2>put _ |
        \ <line1>,<line2>g/.\+/ .;-/^$/ join |normal $x

    " Scroll to top when using jump-to in ctags
    nnoremap <C-]> <C-]>zt
    nnoremap <C-t> <C-t>zt

    " Keep search matches in the middle of the screen
    nnoremap n nzz
    nnoremap N Nzz
endfunction

function! CommandModeKeyMappings()
    map <C-h> <C-w>h
    map <C-l> <C-w>l
    map <S-x> :wq<CR>
    cmap w!! w !sudo tee % >/dev/null
    nmap <silent> ,/ :nohlsearch<CR>

    " Toggle paste mode
    set pastetoggle=<F10>

    " Run script file
    map <S-r> :!clear && bash scripts/run.sh<CR>
    nnoremap <F12> :tabnew<CR>:e scripts/run.sh<CR>
endfunction

function! NavImproved()
    nnoremap j gj
    nnoremap k gk
    vnoremap j gj
    vnoremap k gk
endfunction

function! VimTabsKeyMappings()
    map <C-k> :tabr<cr>
    map <C-j> :tabl<cr>
    map <C-h> :tabp<cr>
    map <C-l> :tabn<cr>
endfunction

function! VimSplitsKeyMappings()
    map <S-k> :wincmd k<CR>
    map <S-j> :wincmd j<CR>
    map <S-h> :wincmd h<CR>
    map <S-l> :wincmd l<CR>
endfunction

function! EscapeCommonOperationTypos()
    cmap Wq wq
    cmap WQ wq
endfunction

function! Session()
    " Save session on quitting Vim
    if argc() == 0 && filereadable(".git/config")
        autocmd VimLeave * NERDTreeClose
        autocmd VimLeave * mksession! .git/session.vim
    endif

    " Restore session on starting Vim
    if argc() == 0 && filereadable(".git/session.vim")
        autocmd VimEnter * source .git/session.vim
    endif
    autocmd VimEnter * NERDTree
    autocmd VimResized * wincmd =
endfunction

function! Multiple_cursors_before()
    echo 'Disabled autocomplete'
    let g:ycm_auto_trigger = 0  " switch off YCM temporarily
endfunction

function! Multiple_cursors_after()
    echo 'Enabled autocomplete'
    let g:ycm_auto_trigger = 1  " turn YCM back on
endfunction

function! Airline()
    let g:airline_powerline_fonts = 0
    let g:airline#extensions#tabline#enabled = 0

    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    " unicode symbols
    let g:airline_left_sep = ''
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_sep = ''
endfunction

function! Pencil()
  let g:pencil#textwidth = 78
  let g:pencil#autoformat = 1
endfunction

function! SyntasticOptions()
    " debug mode
    let g:syntastic_debug=0

    " general settings
    let g:syntastic_enable_highlighting=1
    let g:syntastic_check_on_open=1
    let g:syntastic_enable_signs=1
    let g:syntastic_always_populate_loc_list=0
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_wq = 0

    " warning and error symbols
    let g:syntastic_warning_symbol       = 'W'
    let g:syntastic_error_symbol         = 'E'
    let g:syntastic_style_error_symbol   = 'SE'
    let g:syntastic_style_warning_symbol = 'SW'

    " c specific settings
    " cpp specific settings
    let g:syntastic_cpp_include_dirs=[
        \ 'include',
        \ '/usr/include/eigen3',
    \ ]

    let g:syntastic_cpp_checkers=['']

    " python specific settings
    let g:syntastic_python_checkers=['flake8']
    " let g:syntastic_ignore_files = ['\.py$']

    " tex specific settings
    let g:syntastic_tex_checkers=['']

    " html specific settings
    let g:syntastic_html_checkers=['']  " disable syntastic for html files
endfunction

function! NerdTree()
    nnoremap <F3> :NERDTreeToggle<CR><CR>
    " let g:NERDTreeDirArrows=0
    let g:NERDTreeWinSize=30 " set NerdTree size
    let g:NERDTreeWinPos='left'

    " if NerdTree is last thing open in vim, close vim completely
    autocmd bufenter * if (
            \ winnr("$") == 1
            \ && exists("b:NERDTreeType")
            \ && b:NERDTreeType == "primary")
            \ | q |
    \ endif

    " switch off dir arrows
    " let g:NERDTreeDirArrows=0
endfunction

" https://stackoverflow.com/q/2066590
function! s:CloseIfOnlyControlWinLeft()
    if winnr("$") != 1
       return
    endif
    if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
            \ || &buftype == 'quickfix'
        q
    endif
endfunction

augroup CloseIfOnlyControlWinLeft
    au!
    au BufEnter * call s:CloseIfOnlyControlWinLeft()
augroup END

function! EasyGrep()
    let g:EasyGrepRecursive=1
    let g:EasyGrepReplaceWindowMode=2
    let g:EasyGrepIgnoreCase=0
    let g:EasyGrepBinary=0
endfunction

function! FZF()
    nmap <C-p> :FZF<CR>

    " [Buffers] Jump to the existing window if possible
    let g:fzf_buffers_jump=1
endfunction

function! MultiCursors()
    let g:multi_cursor_use_default_mapping=1
endfunction

function! YouCompleteMe()
    let g:ycm_max_num_candidates = 5
    let g:ycm_always_populate_location_list = 1

    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    let g:SuperTabDefaultCompletionType = '<C-n>'
endfunction

function! UltiSnips()
    let g:UltiSnipsExpandTrigger = "<TAB>"
    let g:UltiSnipsJumpForwardTrigger` = "<TAB>"
    let g:UltiSnipsJumpBackwardTrigger = "<S-TAB>
    let g:UltiSnipsSnippetsDir = "~/.vim/snippets"
endfunction

" MAIN
call Vundle()
call StartUp()
call EditorAppearance()
call EditorBehaviour()
call CommandModeKeyMappings()
call NavImproved()
call VimTabsKeyMappings()
call VimSplitsKeyMappings()
call EscapeCommonOperationTypos()

" PLUGIN SETTINGS
call Airline()
"call Pencil()
call SyntasticOptions()
call NerdTree()
call EasyGrep()
call FZF()
call MultiCursors()
call YouCompleteMe()
